scalar Date

type Query {
  city(id: ID!): City
  cities: [City]
  event: Event
  geographicSite(id: ID!): GeographicSite
  geographicSites: [GeographicSite]
  person(id: ID!): Person
}

type Mutation {
  createCity(input: CreateCityInput!): City
  createGeographicSite(input: CreateGeographicSiteInput!): GeographicSite
  createPerson(input: CreatePersonInput!): Person
}

type City {
  id: ID!
  name: String
  lat: Float
  long: Float
}

input CreateCityInput {
  name: String!
  lat: Float!
  long: Float!
}

type Person {
  id: ID!
  name: String!
  birthDate: Date!
  deathDate: Date!
}

input CreatePersonInput {
  name: String!
  birthDate: Date!
  deathDate: Date!
}

type GeographicSite {
  id: ID!
  name: String!
  location: GeographicPoint!
}

input CreateGeographicSiteInput {
  name: String!
  location: CreateGeographicPointInput!
}

type Event {
  id: ID!
  intervalBegin: Int
  intervalEnd: Int
}

type GeographicRegion {
  id: ID!
  boundaries: [Int]!
}

type GeographicPoint {
  id: ID!
  lat: Float!
  long: Float!
}

input CreateGeographicPointInput {
  lat: Float!
  long: Float!
}
